// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension="
// @generated from file codestash.proto (package codestash, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message codestash.Record
 */
export class Record extends Message<Record> {
  /**
   * @generated from field: bytes record = 1;
   */
  record = new Uint8Array(0);

  /**
   * @generated from field: string cid = 2;
   */
  cid = "";

  /**
   * @generated from field: google.protobuf.Timestamp indexed_at = 3;
   */
  indexedAt?: Timestamp;

  /**
   * @generated from field: bool taken_down = 4;
   */
  takenDown = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp sorted_at = 6;
   */
  sortedAt?: Timestamp;

  /**
   * @generated from field: string takedown_ref = 7;
   */
  takedownRef = "";

  constructor(data?: PartialMessage<Record>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.Record";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "indexed_at", kind: "message", T: Timestamp },
    { no: 4, name: "taken_down", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "sorted_at", kind: "message", T: Timestamp },
    { no: 7, name: "takedown_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Record {
    return new Record().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Record {
    return new Record().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Record {
    return new Record().fromJsonString(jsonString, options);
  }

  static equals(a: Record | PlainMessage<Record> | undefined, b: Record | PlainMessage<Record> | undefined): boolean {
    return proto3.util.equals(Record, a, b);
  }
}

/**
 * @generated from message codestash.Repository
 */
export class Repository extends Message<Repository> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 5;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string default_branch = 6;
   */
  defaultBranch = "";

  /**
   * @generated from field: string homepage = 7;
   */
  homepage = "";

  /**
   * @generated from field: repeated string languages = 8;
   */
  languages: string[] = [];

  /**
   * @generated from field: string license = 9;
   */
  license = "";

  /**
   * @generated from field: int32 stars = 10;
   */
  stars = 0;

  /**
   * @generated from field: int32 forks = 11;
   */
  forks = 0;

  /**
   * @generated from field: int32 watchers = 12;
   */
  watchers = 0;

  /**
   * @generated from field: string url = 13;
   */
  url = "";

  constructor(data?: PartialMessage<Repository>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.Repository";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "updated_at", kind: "message", T: Timestamp },
    { no: 6, name: "default_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "homepage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "languages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "license", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "stars", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "forks", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "watchers", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Repository {
    return new Repository().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Repository {
    return new Repository().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Repository {
    return new Repository().fromJsonString(jsonString, options);
  }

  static equals(a: Repository | PlainMessage<Repository> | undefined, b: Repository | PlainMessage<Repository> | undefined): boolean {
    return proto3.util.equals(Repository, a, b);
  }
}

/**
 * @generated from message codestash.GetRepositoriesRequest
 */
export class GetRepositoriesRequest extends Message<GetRepositoriesRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  constructor(data?: PartialMessage<GetRepositoriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetRepositoriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepositoriesRequest {
    return new GetRepositoriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepositoriesRequest {
    return new GetRepositoriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepositoriesRequest {
    return new GetRepositoriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepositoriesRequest | PlainMessage<GetRepositoriesRequest> | undefined, b: GetRepositoriesRequest | PlainMessage<GetRepositoriesRequest> | undefined): boolean {
    return proto3.util.equals(GetRepositoriesRequest, a, b);
  }
}

/**
 * @generated from message codestash.GetRepositoriesResponse
 */
export class GetRepositoriesResponse extends Message<GetRepositoriesResponse> {
  /**
   * @generated from field: repeated codestash.Repository repositories = 1;
   */
  repositories: Repository[] = [];

  constructor(data?: PartialMessage<GetRepositoriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetRepositoriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repositories", kind: "message", T: Repository, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepositoriesResponse {
    return new GetRepositoriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepositoriesResponse {
    return new GetRepositoriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepositoriesResponse {
    return new GetRepositoriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepositoriesResponse | PlainMessage<GetRepositoriesResponse> | undefined, b: GetRepositoriesResponse | PlainMessage<GetRepositoriesResponse> | undefined): boolean {
    return proto3.util.equals(GetRepositoriesResponse, a, b);
  }
}

/**
 * @generated from message codestash.GetProfileRecordsRequest
 */
export class GetProfileRecordsRequest extends Message<GetProfileRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  constructor(data?: PartialMessage<GetProfileRecordsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetProfileRecordsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProfileRecordsRequest {
    return new GetProfileRecordsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProfileRecordsRequest {
    return new GetProfileRecordsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProfileRecordsRequest {
    return new GetProfileRecordsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProfileRecordsRequest | PlainMessage<GetProfileRecordsRequest> | undefined, b: GetProfileRecordsRequest | PlainMessage<GetProfileRecordsRequest> | undefined): boolean {
    return proto3.util.equals(GetProfileRecordsRequest, a, b);
  }
}

/**
 * @generated from message codestash.GetProfileRecordsResponse
 */
export class GetProfileRecordsResponse extends Message<GetProfileRecordsResponse> {
  /**
   * @generated from field: repeated codestash.Record records = 1;
   */
  records: Record[] = [];

  constructor(data?: PartialMessage<GetProfileRecordsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetProfileRecordsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: Record, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProfileRecordsResponse {
    return new GetProfileRecordsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProfileRecordsResponse {
    return new GetProfileRecordsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProfileRecordsResponse {
    return new GetProfileRecordsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProfileRecordsResponse | PlainMessage<GetProfileRecordsResponse> | undefined, b: GetProfileRecordsResponse | PlainMessage<GetProfileRecordsResponse> | undefined): boolean {
    return proto3.util.equals(GetProfileRecordsResponse, a, b);
  }
}

/**
 * 
 * Interactions
 * 
 *
 * @generated from message codestash.GetCountsForUsersRequest
 */
export class GetCountsForUsersRequest extends Message<GetCountsForUsersRequest> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = [];

  constructor(data?: PartialMessage<GetCountsForUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetCountsForUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCountsForUsersRequest {
    return new GetCountsForUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCountsForUsersRequest {
    return new GetCountsForUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCountsForUsersRequest {
    return new GetCountsForUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCountsForUsersRequest | PlainMessage<GetCountsForUsersRequest> | undefined, b: GetCountsForUsersRequest | PlainMessage<GetCountsForUsersRequest> | undefined): boolean {
    return proto3.util.equals(GetCountsForUsersRequest, a, b);
  }
}

/**
 * @generated from message codestash.GetCountsForUsersResponse
 */
export class GetCountsForUsersResponse extends Message<GetCountsForUsersResponse> {
  /**
   * @generated from field: repeated int32 following = 3;
   */
  following: number[] = [];

  /**
   * @generated from field: repeated int32 followers = 4;
   */
  followers: number[] = [];

  constructor(data?: PartialMessage<GetCountsForUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetCountsForUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "following", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 4, name: "followers", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCountsForUsersResponse {
    return new GetCountsForUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCountsForUsersResponse {
    return new GetCountsForUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCountsForUsersResponse {
    return new GetCountsForUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCountsForUsersResponse | PlainMessage<GetCountsForUsersResponse> | undefined, b: GetCountsForUsersResponse | PlainMessage<GetCountsForUsersResponse> | undefined): boolean {
    return proto3.util.equals(GetCountsForUsersResponse, a, b);
  }
}

/**
 * 
 * Relationships
 * 
 *
 * @generated from message codestash.GetRelationshipsRequest
 */
export class GetRelationshipsRequest extends Message<GetRelationshipsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: repeated string target_dids = 2;
   */
  targetDids: string[] = [];

  constructor(data?: PartialMessage<GetRelationshipsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetRelationshipsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_dids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationshipsRequest {
    return new GetRelationshipsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationshipsRequest {
    return new GetRelationshipsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationshipsRequest {
    return new GetRelationshipsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationshipsRequest | PlainMessage<GetRelationshipsRequest> | undefined, b: GetRelationshipsRequest | PlainMessage<GetRelationshipsRequest> | undefined): boolean {
    return proto3.util.equals(GetRelationshipsRequest, a, b);
  }
}

/**
 * @generated from message codestash.Relationships
 */
export class Relationships extends Message<Relationships> {
  /**
   * @generated from field: string following = 7;
   */
  following = "";

  /**
   * @generated from field: string followed_by = 8;
   */
  followedBy = "";

  constructor(data?: PartialMessage<Relationships>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.Relationships";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 7, name: "following", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "followed_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Relationships {
    return new Relationships().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Relationships {
    return new Relationships().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Relationships {
    return new Relationships().fromJsonString(jsonString, options);
  }

  static equals(a: Relationships | PlainMessage<Relationships> | undefined, b: Relationships | PlainMessage<Relationships> | undefined): boolean {
    return proto3.util.equals(Relationships, a, b);
  }
}

/**
 * @generated from message codestash.GetRelationshipsResponse
 */
export class GetRelationshipsResponse extends Message<GetRelationshipsResponse> {
  /**
   * @generated from field: repeated codestash.Relationships relationships = 1;
   */
  relationships: Relationships[] = [];

  constructor(data?: PartialMessage<GetRelationshipsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetRelationshipsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relationships", kind: "message", T: Relationships, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationshipsResponse {
    return new GetRelationshipsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationshipsResponse {
    return new GetRelationshipsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationshipsResponse {
    return new GetRelationshipsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationshipsResponse | PlainMessage<GetRelationshipsResponse> | undefined, b: GetRelationshipsResponse | PlainMessage<GetRelationshipsResponse> | undefined): boolean {
    return proto3.util.equals(GetRelationshipsResponse, a, b);
  }
}

/**
 * 
 * Profile
 * 
 *
 * @generated from message codestash.GetActorsRequest
 */
export class GetActorsRequest extends Message<GetActorsRequest> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = [];

  constructor(data?: PartialMessage<GetActorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetActorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorsRequest {
    return new GetActorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorsRequest {
    return new GetActorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorsRequest {
    return new GetActorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorsRequest | PlainMessage<GetActorsRequest> | undefined, b: GetActorsRequest | PlainMessage<GetActorsRequest> | undefined): boolean {
    return proto3.util.equals(GetActorsRequest, a, b);
  }
}

/**
 * @generated from message codestash.ActorInfo
 */
export class ActorInfo extends Message<ActorInfo> {
  /**
   * @generated from field: bool exists = 1;
   */
  exists = false;

  /**
   * @generated from field: string handle = 2;
   */
  handle = "";

  /**
   * @generated from field: codestash.Record profile = 3;
   */
  profile?: Record;

  /**
   * @generated from field: bool taken_down = 4;
   */
  takenDown = false;

  /**
   * @generated from field: string takedown_ref = 5;
   */
  takedownRef = "";

  /**
   * @generated from field: google.protobuf.Timestamp tombstoned_at = 6;
   */
  tombstonedAt?: Timestamp;

  /**
   * @generated from field: bool labeler = 7;
   */
  labeler = false;

  constructor(data?: PartialMessage<ActorInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.ActorInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "handle", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "profile", kind: "message", T: Record },
    { no: 4, name: "taken_down", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "takedown_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tombstoned_at", kind: "message", T: Timestamp },
    { no: 7, name: "labeler", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActorInfo {
    return new ActorInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActorInfo {
    return new ActorInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActorInfo {
    return new ActorInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ActorInfo | PlainMessage<ActorInfo> | undefined, b: ActorInfo | PlainMessage<ActorInfo> | undefined): boolean {
    return proto3.util.equals(ActorInfo, a, b);
  }
}

/**
 * @generated from message codestash.GetActorsResponse
 */
export class GetActorsResponse extends Message<GetActorsResponse> {
  /**
   * @generated from field: repeated codestash.ActorInfo actors = 1;
   */
  actors: ActorInfo[] = [];

  constructor(data?: PartialMessage<GetActorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetActorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actors", kind: "message", T: ActorInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorsResponse {
    return new GetActorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorsResponse {
    return new GetActorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorsResponse {
    return new GetActorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorsResponse | PlainMessage<GetActorsResponse> | undefined, b: GetActorsResponse | PlainMessage<GetActorsResponse> | undefined): boolean {
    return proto3.util.equals(GetActorsResponse, a, b);
  }
}

/**
 * - Latest repo rev of user w/ DID
 *     - Read-after-write header in`getProfile`, `getProfiles`, `getActorLikes`, `getAuthorFeed`, `getListFeed`, `getPostThread`, `getTimeline`.  Could it be view dependent?
 *
 * @generated from message codestash.GetLatestRevRequest
 */
export class GetLatestRevRequest extends Message<GetLatestRevRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  constructor(data?: PartialMessage<GetLatestRevRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetLatestRevRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLatestRevRequest {
    return new GetLatestRevRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLatestRevRequest {
    return new GetLatestRevRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLatestRevRequest {
    return new GetLatestRevRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLatestRevRequest | PlainMessage<GetLatestRevRequest> | undefined, b: GetLatestRevRequest | PlainMessage<GetLatestRevRequest> | undefined): boolean {
    return proto3.util.equals(GetLatestRevRequest, a, b);
  }
}

/**
 * @generated from message codestash.GetLatestRevResponse
 */
export class GetLatestRevResponse extends Message<GetLatestRevResponse> {
  /**
   * @generated from field: string rev = 1;
   */
  rev = "";

  constructor(data?: PartialMessage<GetLatestRevResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetLatestRevResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rev", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLatestRevResponse {
    return new GetLatestRevResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLatestRevResponse {
    return new GetLatestRevResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLatestRevResponse {
    return new GetLatestRevResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLatestRevResponse | PlainMessage<GetLatestRevResponse> | undefined, b: GetLatestRevResponse | PlainMessage<GetLatestRevResponse> | undefined): boolean {
    return proto3.util.equals(GetLatestRevResponse, a, b);
  }
}

/**
 * @generated from message codestash.GetIdentityByDidRequest
 */
export class GetIdentityByDidRequest extends Message<GetIdentityByDidRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = "";

  constructor(data?: PartialMessage<GetIdentityByDidRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetIdentityByDidRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIdentityByDidRequest {
    return new GetIdentityByDidRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIdentityByDidRequest {
    return new GetIdentityByDidRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIdentityByDidRequest {
    return new GetIdentityByDidRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIdentityByDidRequest | PlainMessage<GetIdentityByDidRequest> | undefined, b: GetIdentityByDidRequest | PlainMessage<GetIdentityByDidRequest> | undefined): boolean {
    return proto3.util.equals(GetIdentityByDidRequest, a, b);
  }
}

/**
 * @generated from message codestash.GetIdentityByDidResponse
 */
export class GetIdentityByDidResponse extends Message<GetIdentityByDidResponse> {
  /**
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * @generated from field: string handle = 2;
   */
  handle = "";

  /**
   * @generated from field: bytes keys = 3;
   */
  keys = new Uint8Array(0);

  /**
   * @generated from field: bytes services = 4;
   */
  services = new Uint8Array(0);

  /**
   * @generated from field: google.protobuf.Timestamp updated = 5;
   */
  updated?: Timestamp;

  constructor(data?: PartialMessage<GetIdentityByDidResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetIdentityByDidResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "handle", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "keys", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "services", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "updated", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIdentityByDidResponse {
    return new GetIdentityByDidResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIdentityByDidResponse {
    return new GetIdentityByDidResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIdentityByDidResponse {
    return new GetIdentityByDidResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIdentityByDidResponse | PlainMessage<GetIdentityByDidResponse> | undefined, b: GetIdentityByDidResponse | PlainMessage<GetIdentityByDidResponse> | undefined): boolean {
    return proto3.util.equals(GetIdentityByDidResponse, a, b);
  }
}

/**
 * @generated from message codestash.GetIdentityByHandleRequest
 */
export class GetIdentityByHandleRequest extends Message<GetIdentityByHandleRequest> {
  /**
   * @generated from field: string handle = 1;
   */
  handle = "";

  constructor(data?: PartialMessage<GetIdentityByHandleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetIdentityByHandleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIdentityByHandleRequest {
    return new GetIdentityByHandleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIdentityByHandleRequest {
    return new GetIdentityByHandleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIdentityByHandleRequest {
    return new GetIdentityByHandleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIdentityByHandleRequest | PlainMessage<GetIdentityByHandleRequest> | undefined, b: GetIdentityByHandleRequest | PlainMessage<GetIdentityByHandleRequest> | undefined): boolean {
    return proto3.util.equals(GetIdentityByHandleRequest, a, b);
  }
}

/**
 * @generated from message codestash.GetIdentityByHandleResponse
 */
export class GetIdentityByHandleResponse extends Message<GetIdentityByHandleResponse> {
  /**
   * @generated from field: string handle = 1;
   */
  handle = "";

  /**
   * @generated from field: string did = 2;
   */
  did = "";

  /**
   * @generated from field: bytes keys = 3;
   */
  keys = new Uint8Array(0);

  /**
   * @generated from field: bytes services = 4;
   */
  services = new Uint8Array(0);

  /**
   * @generated from field: google.protobuf.Timestamp updated = 5;
   */
  updated?: Timestamp;

  constructor(data?: PartialMessage<GetIdentityByHandleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetIdentityByHandleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "keys", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "services", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "updated", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIdentityByHandleResponse {
    return new GetIdentityByHandleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIdentityByHandleResponse {
    return new GetIdentityByHandleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIdentityByHandleResponse {
    return new GetIdentityByHandleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIdentityByHandleResponse | PlainMessage<GetIdentityByHandleResponse> | undefined, b: GetIdentityByHandleResponse | PlainMessage<GetIdentityByHandleResponse> | undefined): boolean {
    return proto3.util.equals(GetIdentityByHandleResponse, a, b);
  }
}

/**
 * - return did for handle A
 *     - `resolveHandle`
 *     - answering queries where the query param is a handle
 *
 * @generated from message codestash.GetDidsByHandlesRequest
 */
export class GetDidsByHandlesRequest extends Message<GetDidsByHandlesRequest> {
  /**
   * @generated from field: repeated string handles = 1;
   */
  handles: string[] = [];

  constructor(data?: PartialMessage<GetDidsByHandlesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetDidsByHandlesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDidsByHandlesRequest {
    return new GetDidsByHandlesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDidsByHandlesRequest {
    return new GetDidsByHandlesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDidsByHandlesRequest {
    return new GetDidsByHandlesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDidsByHandlesRequest | PlainMessage<GetDidsByHandlesRequest> | undefined, b: GetDidsByHandlesRequest | PlainMessage<GetDidsByHandlesRequest> | undefined): boolean {
    return proto3.util.equals(GetDidsByHandlesRequest, a, b);
  }
}

/**
 * @generated from message codestash.GetDidsByHandlesResponse
 */
export class GetDidsByHandlesResponse extends Message<GetDidsByHandlesResponse> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = [];

  constructor(data?: PartialMessage<GetDidsByHandlesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetDidsByHandlesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDidsByHandlesResponse {
    return new GetDidsByHandlesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDidsByHandlesResponse {
    return new GetDidsByHandlesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDidsByHandlesResponse {
    return new GetDidsByHandlesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDidsByHandlesResponse | PlainMessage<GetDidsByHandlesResponse> | undefined, b: GetDidsByHandlesResponse | PlainMessage<GetDidsByHandlesResponse> | undefined): boolean {
    return proto3.util.equals(GetDidsByHandlesResponse, a, b);
  }
}

/**
 * @generated from message codestash.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

/**
 * @generated from message codestash.URLResponse
 */
export class URLResponse extends Message<URLResponse> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<URLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.URLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): URLResponse {
    return new URLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): URLResponse {
    return new URLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): URLResponse {
    return new URLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: URLResponse | PlainMessage<URLResponse> | undefined, b: URLResponse | PlainMessage<URLResponse> | undefined): boolean {
    return proto3.util.equals(URLResponse, a, b);
  }
}

/**
 * @generated from message codestash.RepositoryRecordMeta
 */
export class RepositoryRecordMeta extends Message<RepositoryRecordMeta> {
  /**
   * @generated from field: bool violates_thread_gate = 1;
   */
  violatesThreadGate = false;

  constructor(data?: PartialMessage<RepositoryRecordMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.RepositoryRecordMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "violates_thread_gate", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepositoryRecordMeta {
    return new RepositoryRecordMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepositoryRecordMeta {
    return new RepositoryRecordMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepositoryRecordMeta {
    return new RepositoryRecordMeta().fromJsonString(jsonString, options);
  }

  static equals(a: RepositoryRecordMeta | PlainMessage<RepositoryRecordMeta> | undefined, b: RepositoryRecordMeta | PlainMessage<RepositoryRecordMeta> | undefined): boolean {
    return proto3.util.equals(RepositoryRecordMeta, a, b);
  }
}

/**
 * @generated from message codestash.GetRepositoryRecordsRequest
 */
export class GetRepositoryRecordsRequest extends Message<GetRepositoryRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  constructor(data?: PartialMessage<GetRepositoryRecordsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetRepositoryRecordsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepositoryRecordsRequest {
    return new GetRepositoryRecordsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepositoryRecordsRequest {
    return new GetRepositoryRecordsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepositoryRecordsRequest {
    return new GetRepositoryRecordsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepositoryRecordsRequest | PlainMessage<GetRepositoryRecordsRequest> | undefined, b: GetRepositoryRecordsRequest | PlainMessage<GetRepositoryRecordsRequest> | undefined): boolean {
    return proto3.util.equals(GetRepositoryRecordsRequest, a, b);
  }
}

/**
 * @generated from message codestash.GetRepositoryRecordsResponse
 */
export class GetRepositoryRecordsResponse extends Message<GetRepositoryRecordsResponse> {
  /**
   * @generated from field: repeated codestash.Record records = 1;
   */
  records: Record[] = [];

  /**
   * @generated from field: repeated codestash.RepositoryRecordMeta meta = 2;
   */
  meta: RepositoryRecordMeta[] = [];

  constructor(data?: PartialMessage<GetRepositoryRecordsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetRepositoryRecordsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: Record, repeated: true },
    { no: 2, name: "meta", kind: "message", T: RepositoryRecordMeta, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepositoryRecordsResponse {
    return new GetRepositoryRecordsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepositoryRecordsResponse {
    return new GetRepositoryRecordsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepositoryRecordsResponse {
    return new GetRepositoryRecordsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepositoryRecordsResponse | PlainMessage<GetRepositoryRecordsResponse> | undefined, b: GetRepositoryRecordsResponse | PlainMessage<GetRepositoryRecordsResponse> | undefined): boolean {
    return proto3.util.equals(GetRepositoryRecordsResponse, a, b);
  }
}

