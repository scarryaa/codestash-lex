// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension="
// @generated from file codestash.proto (package codestash, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message codestash.Record
 */
export class Record extends Message<Record> {
  /**
   * @generated from field: bytes record = 1;
   */
  record = new Uint8Array(0);

  /**
   * @generated from field: string cid = 2;
   */
  cid = "";

  /**
   * @generated from field: google.protobuf.Timestamp indexed_at = 3;
   */
  indexedAt?: Timestamp;

  /**
   * @generated from field: bool taken_down = 4;
   */
  takenDown = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp sorted_at = 6;
   */
  sortedAt?: Timestamp;

  /**
   * @generated from field: string takedown_ref = 7;
   */
  takedownRef = "";

  constructor(data?: PartialMessage<Record>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.Record";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "indexed_at", kind: "message", T: Timestamp },
    { no: 4, name: "taken_down", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "sorted_at", kind: "message", T: Timestamp },
    { no: 7, name: "takedown_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Record {
    return new Record().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Record {
    return new Record().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Record {
    return new Record().fromJsonString(jsonString, options);
  }

  static equals(a: Record | PlainMessage<Record> | undefined, b: Record | PlainMessage<Record> | undefined): boolean {
    return proto3.util.equals(Record, a, b);
  }
}

/**
 * @generated from message codestash.GetRepoRecordsRequest
 */
export class GetRepoRecordsRequest extends Message<GetRepoRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  constructor(data?: PartialMessage<GetRepoRecordsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetRepoRecordsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepoRecordsRequest {
    return new GetRepoRecordsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepoRecordsRequest {
    return new GetRepoRecordsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepoRecordsRequest {
    return new GetRepoRecordsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepoRecordsRequest | PlainMessage<GetRepoRecordsRequest> | undefined, b: GetRepoRecordsRequest | PlainMessage<GetRepoRecordsRequest> | undefined): boolean {
    return proto3.util.equals(GetRepoRecordsRequest, a, b);
  }
}

/**
 * @generated from message codestash.GetRepoRecordsResponse
 */
export class GetRepoRecordsResponse extends Message<GetRepoRecordsResponse> {
  /**
   * @generated from field: repeated codestash.Record records = 1;
   */
  records: Record[] = [];

  constructor(data?: PartialMessage<GetRepoRecordsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "codestash.GetRepoRecordsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: Record, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepoRecordsResponse {
    return new GetRepoRecordsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepoRecordsResponse {
    return new GetRepoRecordsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepoRecordsResponse {
    return new GetRepoRecordsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepoRecordsResponse | PlainMessage<GetRepoRecordsResponse> | undefined, b: GetRepoRecordsResponse | PlainMessage<GetRepoRecordsResponse> | undefined): boolean {
    return proto3.util.equals(GetRepoRecordsResponse, a, b);
  }
}

