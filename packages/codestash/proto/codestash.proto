syntax = "proto3";

package codestash;
option go_package = "./;codestash";

import "google/protobuf/timestamp.proto";

message Record {
    bytes record = 1;
    string cid = 2;
    google.protobuf.Timestamp indexed_at = 3;
    bool taken_down = 4;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp sorted_at = 6;
    string takedown_ref = 7;
}

message Repository {
    string name = 1;
    string owner = 2;
    string description = 3;
    google.protobuf.Timestamp created_at = 4;
    google.protobuf.Timestamp updated_at = 5;
    string default_branch = 6;
    string homepage = 7;
    repeated string languages = 8;
    string license = 9;
    int32 stars = 10;
    int32 forks = 11;
    int32 watchers = 12;
    string url = 13;
}

message GetRepositoriesRequest {
    repeated string uris = 1;
}

message GetRepositoriesResponse {
    repeated Repository repositories = 1;
}

service Service {
    // Records
      rpc GetRepositoryRecords(GetRepositoryRecordsRequest) returns (GetRepositoryRecordsResponse);

    // Repository
    rpc GetRepositories(GetRepositoriesRequest) returns (GetRepositoriesResponse);

    // Identity
    rpc GetIdentityByDid(GetIdentityByDidRequest) returns (GetIdentityByDidResponse);
    rpc GetIdentityByHandle(GetIdentityByHandleRequest) returns (GetIdentityByHandleResponse);

    // Profile
    rpc GetActors(GetActorsRequest) returns (GetActorsResponse);
    rpc GetDidsByHandles(GetDidsByHandlesRequest) returns (GetDidsByHandlesResponse);
    
    // Moderation
    rpc GetBlobTakedown(GetBlobTakedownRequest) returns (GetBlobTakedownResponse);
    rpc GetRecordTakedown(GetRecordTakedownRequest) returns (GetRecordTakedownResponse);
    rpc GetActorTakedown(GetActorTakedownRequest) returns (GetActorTakedownResponse);

    // Records
    rpc GetProfileRecords(GetProfileRecordsRequest) returns (GetProfileRecordsResponse);

    // Relationships
    rpc GetRelationships(GetRelationshipsRequest) returns (GetRelationshipsResponse);

    // Sync
    rpc GetLatestRev(GetLatestRevRequest) returns (GetLatestRevResponse);

    // Interaction Counts
    rpc GetCountsForUsers(GetCountsForUsersRequest) returns (GetCountsForUsersResponse);

    // URL
    rpc GetURL(Empty) returns (URLResponse);
}


message GetProfileRecordsRequest {
  repeated string uris = 1;
}

message GetProfileRecordsResponse {
  repeated Record records = 1;
}

//
// Moderation
//

message GetBlobTakedownRequest {
  string did = 1;
  string cid = 2;
}

message GetBlobTakedownResponse {
  bool taken_down = 1;
  string takedown_ref = 2;
}



message GetActorTakedownRequest {
  string did = 1;
}

message GetActorTakedownResponse {
  bool taken_down = 1;
  string takedown_ref = 2;
}

message GetRecordTakedownRequest {
  string record_uri = 1;
}

message GetRecordTakedownResponse {
  bool taken_down = 1;
  string takedown_ref = 2;
}

// Ping
message PingRequest {}
message PingResponse {}

// 
// Interactions
//
message GetCountsForUsersRequest {
  repeated string dids = 1;
}

message GetCountsForUsersResponse {
  repeated int32 following = 3;
  repeated int32 followers = 4;
}

//
// Relationships
//
message GetRelationshipsRequest {
  string actor_did = 1;
  repeated string target_dids = 2;
}

message Relationships {
  string following = 7;
  string followed_by = 8;
}

message GetRelationshipsResponse {
  repeated Relationships relationships = 1;
}

//
// Profile
//
message GetActorsRequest {
  repeated string dids = 1;
}

message ActorInfo {
  bool exists = 1;
  string handle = 2;
  Record profile = 3;
  bool taken_down = 4;
  string takedown_ref = 5;
  google.protobuf.Timestamp tombstoned_at = 6;
  bool labeler = 7;
}

message GetActorsResponse {
  repeated ActorInfo actors = 1;
}

//
// Sync
//

// - Latest repo rev of user w/ DID
//     - Read-after-write header in`getProfile`, `getProfiles`, `getActorLikes`, `getAuthorFeed`, `getListFeed`, `getPostThread`, `getTimeline`.  Could it be view dependent?
message GetLatestRevRequest {
  string actor_did = 1;
}

message GetLatestRevResponse {
  string rev = 1;
}

message GetIdentityByDidRequest {
    string did = 1;
}

message GetIdentityByDidResponse {
    string did = 1;
    string handle = 2;
    bytes keys = 3;
    bytes services = 4;
    google.protobuf.Timestamp updated = 5;
}

message GetIdentityByHandleRequest {
    string handle = 1;
}
message GetIdentityByHandleResponse {
    string handle = 1;
    string did = 2;
    bytes keys = 3;
    bytes services = 4;
    google.protobuf.Timestamp updated = 5;
}

// - return did for handle A
//     - `resolveHandle`
//     - answering queries where the query param is a handle
message GetDidsByHandlesRequest {
    repeated string handles = 1;
}

message GetDidsByHandlesResponse {
    repeated string dids = 1;
}

message Empty {}

message URLResponse {
    string url = 1;
}

message RepositoryRecordMeta {
  bool violates_thread_gate = 1;
}

message GetRepositoryRecordsRequest {
    repeated string uris = 1;
}

message GetRepositoryRecordsResponse {
  repeated Record records = 1;
  repeated RepositoryRecordMeta meta = 2;
}